// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: auth.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrchestratorService_AddExpression_FullMethodName     = "/calculator.OrchestratorService/AddExpression"
	OrchestratorService_GetResult_FullMethodName         = "/calculator.OrchestratorService/GetResult"
	OrchestratorService_GetExpressions_FullMethodName    = "/calculator.OrchestratorService/GetExpressions"
	OrchestratorService_GetExpressionByID_FullMethodName = "/calculator.OrchestratorService/GetExpressionByID"
	OrchestratorService_GetTask_FullMethodName           = "/calculator.OrchestratorService/GetTask"
	OrchestratorService_SubmitResult_FullMethodName      = "/calculator.OrchestratorService/SubmitResult"
)

// OrchestratorServiceClient is the client API for OrchestratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ==== Сервисы оркестратора ====
type OrchestratorServiceClient interface {
	AddExpression(ctx context.Context, in *AddExpressionRequest, opts ...grpc.CallOption) (*AddExpressionResponse, error)
	GetResult(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultResponse, error)
	GetExpressions(ctx context.Context, in *GetExpressionsRequest, opts ...grpc.CallOption) (*GetExpressionsResponse, error)
	GetExpressionByID(ctx context.Context, in *GetExpressionByIDRequest, opts ...grpc.CallOption) (*GetExpressionByIDResponse, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
	SubmitResult(ctx context.Context, in *SubmitResultRequest, opts ...grpc.CallOption) (*SubmitResultResponse, error)
}

type orchestratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestratorServiceClient(cc grpc.ClientConnInterface) OrchestratorServiceClient {
	return &orchestratorServiceClient{cc}
}

func (c *orchestratorServiceClient) AddExpression(ctx context.Context, in *AddExpressionRequest, opts ...grpc.CallOption) (*AddExpressionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddExpressionResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_AddExpression_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) GetResult(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResultResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_GetResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) GetExpressions(ctx context.Context, in *GetExpressionsRequest, opts ...grpc.CallOption) (*GetExpressionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExpressionsResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_GetExpressions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) GetExpressionByID(ctx context.Context, in *GetExpressionByIDRequest, opts ...grpc.CallOption) (*GetExpressionByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExpressionByIDResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_GetExpressionByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) SubmitResult(ctx context.Context, in *SubmitResultRequest, opts ...grpc.CallOption) (*SubmitResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitResultResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_SubmitResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestratorServiceServer is the server API for OrchestratorService service.
// All implementations must embed UnimplementedOrchestratorServiceServer
// for forward compatibility.
//
// ==== Сервисы оркестратора ====
type OrchestratorServiceServer interface {
	AddExpression(context.Context, *AddExpressionRequest) (*AddExpressionResponse, error)
	GetResult(context.Context, *GetResultRequest) (*GetResultResponse, error)
	GetExpressions(context.Context, *GetExpressionsRequest) (*GetExpressionsResponse, error)
	GetExpressionByID(context.Context, *GetExpressionByIDRequest) (*GetExpressionByIDResponse, error)
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	SubmitResult(context.Context, *SubmitResultRequest) (*SubmitResultResponse, error)
	mustEmbedUnimplementedOrchestratorServiceServer()
}

// UnimplementedOrchestratorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrchestratorServiceServer struct{}

func (UnimplementedOrchestratorServiceServer) AddExpression(context.Context, *AddExpressionRequest) (*AddExpressionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExpression not implemented")
}
func (UnimplementedOrchestratorServiceServer) GetResult(context.Context, *GetResultRequest) (*GetResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedOrchestratorServiceServer) GetExpressions(context.Context, *GetExpressionsRequest) (*GetExpressionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpressions not implemented")
}
func (UnimplementedOrchestratorServiceServer) GetExpressionByID(context.Context, *GetExpressionByIDRequest) (*GetExpressionByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpressionByID not implemented")
}
func (UnimplementedOrchestratorServiceServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedOrchestratorServiceServer) SubmitResult(context.Context, *SubmitResultRequest) (*SubmitResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitResult not implemented")
}
func (UnimplementedOrchestratorServiceServer) mustEmbedUnimplementedOrchestratorServiceServer() {}
func (UnimplementedOrchestratorServiceServer) testEmbeddedByValue()                             {}

// UnsafeOrchestratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchestratorServiceServer will
// result in compilation errors.
type UnsafeOrchestratorServiceServer interface {
	mustEmbedUnimplementedOrchestratorServiceServer()
}

func RegisterOrchestratorServiceServer(s grpc.ServiceRegistrar, srv OrchestratorServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrchestratorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrchestratorService_ServiceDesc, srv)
}

func _OrchestratorService_AddExpression_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExpressionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).AddExpression(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_AddExpression_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).AddExpression(ctx, req.(*AddExpressionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_GetResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).GetResult(ctx, req.(*GetResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_GetExpressions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExpressionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).GetExpressions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_GetExpressions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).GetExpressions(ctx, req.(*GetExpressionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_GetExpressionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExpressionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).GetExpressionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_GetExpressionByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).GetExpressionByID(ctx, req.(*GetExpressionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_SubmitResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).SubmitResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_SubmitResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).SubmitResult(ctx, req.(*SubmitResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrchestratorService_ServiceDesc is the grpc.ServiceDesc for OrchestratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrchestratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.OrchestratorService",
	HandlerType: (*OrchestratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddExpression",
			Handler:    _OrchestratorService_AddExpression_Handler,
		},
		{
			MethodName: "GetResult",
			Handler:    _OrchestratorService_GetResult_Handler,
		},
		{
			MethodName: "GetExpressions",
			Handler:    _OrchestratorService_GetExpressions_Handler,
		},
		{
			MethodName: "GetExpressionByID",
			Handler:    _OrchestratorService_GetExpressionByID_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _OrchestratorService_GetTask_Handler,
		},
		{
			MethodName: "SubmitResult",
			Handler:    _OrchestratorService_SubmitResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}

const (
	TaskService_FetchTask_FullMethodName  = "/calculator.TaskService/FetchTask"
	TaskService_SendResult_FullMethodName = "/calculator.TaskService/SendResult"
)

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ==== Сервис агента ====
type TaskServiceClient interface {
	FetchTask(ctx context.Context, in *FetchTaskRequest, opts ...grpc.CallOption) (*FetchTaskResponse, error)
	SendResult(ctx context.Context, in *SendResultRequest, opts ...grpc.CallOption) (*SendResultResponse, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) FetchTask(ctx context.Context, in *FetchTaskRequest, opts ...grpc.CallOption) (*FetchTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchTaskResponse)
	err := c.cc.Invoke(ctx, TaskService_FetchTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) SendResult(ctx context.Context, in *SendResultRequest, opts ...grpc.CallOption) (*SendResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResultResponse)
	err := c.cc.Invoke(ctx, TaskService_SendResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility.
//
// ==== Сервис агента ====
type TaskServiceServer interface {
	FetchTask(context.Context, *FetchTaskRequest) (*FetchTaskResponse, error)
	SendResult(context.Context, *SendResultRequest) (*SendResultResponse, error)
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskServiceServer struct{}

func (UnimplementedTaskServiceServer) FetchTask(context.Context, *FetchTaskRequest) (*FetchTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTask not implemented")
}
func (UnimplementedTaskServiceServer) SendResult(context.Context, *SendResultRequest) (*SendResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResult not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}
func (UnimplementedTaskServiceServer) testEmbeddedByValue()                     {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	// If the following call pancis, it indicates UnimplementedTaskServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_FetchTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).FetchTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_FetchTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).FetchTask(ctx, req.(*FetchTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_SendResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).SendResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_SendResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).SendResult(ctx, req.(*SendResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchTask",
			Handler:    _TaskService_FetchTask_Handler,
		},
		{
			MethodName: "SendResult",
			Handler:    _TaskService_SendResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}

const (
	AuthCalculatorService_Register_FullMethodName = "/calculator.AuthCalculatorService/Register"
	AuthCalculatorService_Login_FullMethodName    = "/calculator.AuthCalculatorService/Login"
	AuthCalculatorService_Validate_FullMethodName = "/calculator.AuthCalculatorService/Validate"
)

// AuthCalculatorServiceClient is the client API for AuthCalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ==== Сервис аутентификации ====
type AuthCalculatorServiceClient interface {
	Register(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	Validate(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
}

type authCalculatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthCalculatorServiceClient(cc grpc.ClientConnInterface) AuthCalculatorServiceClient {
	return &authCalculatorServiceClient{cc}
}

func (c *authCalculatorServiceClient) Register(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, AuthCalculatorService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authCalculatorServiceClient) Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, AuthCalculatorService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authCalculatorServiceClient) Validate(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, AuthCalculatorService_Validate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthCalculatorServiceServer is the server API for AuthCalculatorService service.
// All implementations must embed UnimplementedAuthCalculatorServiceServer
// for forward compatibility.
//
// ==== Сервис аутентификации ====
type AuthCalculatorServiceServer interface {
	Register(context.Context, *AuthRequest) (*AuthResponse, error)
	Login(context.Context, *AuthRequest) (*TokenResponse, error)
	Validate(context.Context, *TokenRequest) (*ValidateResponse, error)
	mustEmbedUnimplementedAuthCalculatorServiceServer()
}

// UnimplementedAuthCalculatorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthCalculatorServiceServer struct{}

func (UnimplementedAuthCalculatorServiceServer) Register(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthCalculatorServiceServer) Login(context.Context, *AuthRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthCalculatorServiceServer) Validate(context.Context, *TokenRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedAuthCalculatorServiceServer) mustEmbedUnimplementedAuthCalculatorServiceServer() {}
func (UnimplementedAuthCalculatorServiceServer) testEmbeddedByValue()                               {}

// UnsafeAuthCalculatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthCalculatorServiceServer will
// result in compilation errors.
type UnsafeAuthCalculatorServiceServer interface {
	mustEmbedUnimplementedAuthCalculatorServiceServer()
}

func RegisterAuthCalculatorServiceServer(s grpc.ServiceRegistrar, srv AuthCalculatorServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthCalculatorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthCalculatorService_ServiceDesc, srv)
}

func _AuthCalculatorService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthCalculatorServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthCalculatorService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthCalculatorServiceServer).Register(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthCalculatorService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthCalculatorServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthCalculatorService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthCalculatorServiceServer).Login(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthCalculatorService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthCalculatorServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthCalculatorService_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthCalculatorServiceServer).Validate(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthCalculatorService_ServiceDesc is the grpc.ServiceDesc for AuthCalculatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthCalculatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.AuthCalculatorService",
	HandlerType: (*AuthCalculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AuthCalculatorService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthCalculatorService_Login_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _AuthCalculatorService_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
